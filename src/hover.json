{
  "ActionSheet": "### ActionSheet 动3作面板\n\n[文档3](https://zarm.design/#/components/action-sheet)\n      \n\ndemo:\n\n      <ActionSheet\n        visible={visible1}\n        actions={BUTTONS}\n        onMaskClick={() => setVisible1(!visible1)}\n      />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | false | 是否显示 |\n| spacing | boolean | false | 是否和外部有间距 |\n| destroy | boolean | true | 弹层关闭后是否移除节点 |\n| actions | Action[] | [] | 动作列表 |\n| onMaskClick | () => void | - | 点击遮罩层时触发的回调函数 |\n| onCancel | () => void | - | 显示取消菜单，点击时触发的回调函数 |\n| cancelText | string | '取消' | 取消菜单的文案 |\n\n",
  "Action": "### Action\n\n\n\ndemo:\n\nundefined\n\n",
  "ActivityIndicator": "### ActivityIndicator 活动指示器\n\n[文档](https://zarm.design/#/components/activity-indicator)\n      \n\ndemo:\n\n<ActivityIndicator />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| type | string | 'circular' | 可选值 circular 圆环状、spinner 传统菊花状 |\n| loading | boolean | ture | 是否执行动画 |\n| strokeWidth | number | 5 | 指示器线条宽度 |\n| percent | number | 20 | 填充百分比, 圆环状无动画状态下可用 |\n| size | string | 'md' | 大小，可选值 md、lg |\n\n",
  "Affix": "### Affix 组件名\n\n[文档](https://zarm.design/#/components/affix)\n      \n\ndemo:\n\n          <Affix offsetTop={20}>\n            <Button theme=\"primary\">Top</Button>\n          </Affix>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| offsetTop | number | - | 距离窗口顶部达到指定偏移量后触发 |\n| offsetBottom | number | - | 距离窗口底部达到指定偏移量后触发 |\n| scrollContainer | HTMLElement | (() => HTMLElement) | Window | window | 设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 |\n| onChange | (affixed: boolean) => void | - | 固定状态改变时触发的回调函数 |\n\n",
  "BackToTop": "### BackToTop 返回顶部\n\n[文档](https://zarm.design/#/components/back-totop)\n      \n\ndemo:\n\n      <BackToTop scrollContainer={scrollContainer} onClick={() => console.log('click back to top')}>\n        <div\n          style={{\n            width: 60,\n            height: 60,\n            lineHeight: '60px',\n            textAlign: 'center',\n            backgroundColor: '#fff',\n            color: '#999',\n            fontSize: 20,\n            borderRadius: 30,\n            boxShadow: '0 2px 10px 0 rgba(0, 0, 0, 0.2)',\n            cursor: 'pointer',\n          }}\n        >\n          Up\n        </div>\n      </BackToTop>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| speed | number | 100 | 每 10 毫秒滑动的距离 |\n| visibleDistance | number | 400 | 离滚动条顶部的可视距离 |\n| scrollContainer | HTMLElement | (() => HTMLElement) | window | 设置滚动容器 |\n| onClick | (event?: MouseEvent<HTMLDivElement>) => void | - | 点击后触发的回调函数 |\n\n",
  "Badge": "### Badge 徽标\n\n[文档](https://zarm.design/#/components/badge)\n      \n\ndemo:\n\n<Badge />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| theme | string | 'danger' | 设置主题，可选值为 primary、success、warning、danger |\n| shape | string | 'dot' | 设置形状，可选值为 dot、rect 、radius、round、circle、leaf |\n| text | ReactNode | - | 设置显示的文字 |\n\n",
  "Button": "### Button 按钮\n\n[文档](https://zarm.design/#/components/button)\n      \n\ndemo:\n\n    <Button>default</Button>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| theme | string | 'default' | 设置主题，可选值为 default、primary、danger |\n| size | string | 'md' | 设置大小，可选值为 md、lg、sm、xs |\n| shape | string | 'radius' | 设置形状，可选值为 rect、radius、round、circle |\n| block | boolean | false | 是否块级元素 |\n| ghost | boolean | false | 是否幽灵按钮 |\n| shadow | boolean | false | 是否带阴影 |\n| disabled | boolean | false | 是否禁用 |\n| loading | boolean | false | 是否加载中状态 |\n| icon | ReactNode | - | 设置图标 |\n| onClick | MouseEventHandler<Element> | - | 点击后触发的回调函数 |\n| htmlType | string | 'button' | 设置原生 button 的type值，可选值为button、submit、reset |\n| href | string | - | 点击跳转的地址，指定此属性button的行为和 a 标签一致 |\n| target | string | - | 规定在何处打开链接文档，相当于 a 标签的target属性，href属性存在时生效 |\n| mimeType | string | - | 链接中指向的文档的 mime 类型，相当于 a 标签的type属性，href属性存在时生效 |\n\n",
  "Calendar": "### Calendar 日历\n\n[文档](https://zarm.design/#/components/calendar)\n      \n\ndemo:\n\n      <Calendar\n        multiple={multiple}\n        value={value}\n        min={min}\n        max={max}\n        dateRender={(date) => {\n          if (custom && /(0|6)/.test(date.getDay())) {\n            return (\n              <div className=\"custom\">\n                <div className=\"custom__date\">{date.getDate()}</div>\n                <div className=\"custom__text\">Closed</div>\n              </div>\n            );\n          }\n          return date.getDate();\n        }}\n        disabledDate={(date) => {\n          if (custom) return /(0|6)/.test(date.getDay());\n          return false;\n        }}\n        onChange={(value) => {\n          setValue(value);\n          console.log('onChange', value);\n        }}\n      />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| value | Date | Date[] | - | 值 |\n| defaultValue | Date | Date[] | - | 初始值 |\n| min | Date | new Date() | 最小可选日期 |\n| max | Date | min + 1 年 | 最大可选日期 |\n| multiple | boolean | false | 是否双选 |\n| dateRender | (date?: Date) => void | (date) => date.getDate() | 日期渲染函数 |\n| disabledDate | (date?: Date) => boolean | () => false | 日期是否禁止选择 |\n| onChange | (value?: Date[]) => void | - | 日期选择发生变化时触发的回调函数 |\n\n",
  "Carousel": "### Carousel 走马灯\n\n[文档](https://zarm.design/#/components/carousel)\n      \n\ndemo:\n\n  <Carousel\n    onChange={(index) => {\n      console.log(`onChange: ${index}`);\n    }}\n  >\n    {contentRender()}\n  </Carousel>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| direction | string | 'left' | 滑动方向，可选值 left、right、up、down |\n| height | number | string | 160 | 设置轮播区域高度 |\n| activeIndex | number | 0 | 当前页面的索引 |\n| loop | boolean | false | 是否循环 |\n| swipeable | boolean | true | 是否支持拖拽滑动 |\n| autoPlay | boolean | false | 是否自动轮播 |\n| autoPlayIntervalTime | number | 3000 | 自动轮播时间间隔，单位：毫秒 |\n| moveDistanceRatio | number | 0.5 | 移动距离比例临界点 |\n| moveTimeSpan | number | 300 | 移动时间跨度临界点，单位：毫秒 |\n| animationDuration | number | 500 | 动画执行时间，单位：毫秒 |\n| showPagination | boolean | true | 是否显示分页器 |\n| onChange | (activeIndex?: number) => void | - | 值变化时触发的回调函数 |\n| onChangeEnd | (activeIndex?: number) => void | - | 值变化动画结束后触发的回调函数 |\n\n",
  "Cell": "### Cell 列表项\n\n[文档](https://zarm.design/#/components/cell)\n      \n\ndemo:\n\n<Cell title=\"标题文字\" />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| hasArrow | boolean | false | 是否显示箭头 |\n| icon | ReactNode | - | 设置图标 |\n| title | ReactNode | - | 设置标题区域内容 |\n| description | ReactNode | - | 设置描述区域内容 |\n| help | ReactNode | - | 设置下方提示信息区域内容，通常配合 Message 组件使用 |\n| onClick | () => void | - | 点击后触发的回调函数 |\n\n",
  "Checkbox": "### Checkbox 复选框\n\n[文档](https://zarm.design/#/components/checkbox)\n      \n\ndemo:\n\n      <Checkbox>普通</Checkbox>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| type | string | - | 显示类型，可选值 button, cell |\n| disabled | boolean | false | 是否禁用 |\n| value | string | number | - | 值 |\n| checked | boolean | - | 当前是否选中 |\n| defaultChecked | boolean | - | 初始是否选中 |\n| indeterminate | boolean | false | 当前是否为未全选状态 |\n| id | string | - | 方便外部带有 for 属性的 label 标签控制当前 checkbox |\n| onChange | (event?: ChangeEvent<HTMLInputElement>) => void | - | 值变化时触发的回调函数 |\n\n",
  "Checkbox.Group": "### Checkbox.Group\n\n\n\ndemo:\n\n        <Checkbox.Group value={value} onChange={setValue}>\n          <Checkbox value=\"0\">选项一</Checkbox>\n          <Checkbox value=\"1\">选项二</Checkbox>\n          <Checkbox value=\"2\">选项三</Checkbox>\n        </Checkbox.Group>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| type | string | - | 显示类型，可选值 button, cell |\n| value | number[] | string[] | [] | 选中值 |\n| defaultValue | number[] | string[] | [] | 初始选中值 |\n| disabled | boolean | false | 是否禁用 |\n| block | boolean | false | 子项是否为块级元素 |\n| onChange | (values?: number[] | string[]) => void | - | 值变化时触发的回调函数 |\n| size | string | 'xs' | 按钮类型时的大小，可选值为 lg、md、sm、xs |\n| shape | string | 'radius' | 按钮类型时的形状，可选值 rect, radius, round |\n| ghost | boolean | false | 按钮类型时，选中项样式是否为幽灵按钮 |\n\n",
  "Collapse": "### Collapse 折叠面板\n\n[文档](https://zarm.design/#/components/collapse)\n      \n\ndemo:\n\n      <Collapse\n        disabled\n        activeKey={activeKey}\n        animated={animated}\n        multiple={multiple}\n        onChange={(activeKey) => {\n          console.log(activeKey);\n          setActiveKey(activeKey);\n        }}\n      >\n        <Collapse.Item key=\"1\" title=\"Header of Item1\">\n          This is content of item1. This is content of item1. This is content of item1.\n        </Collapse.Item>\n        <Collapse.Item key=\"2\" title=\"Header of Item2\">\n          This is content of item2. This is content of item2. This is content of item2.\n        </Collapse.Item>\n        <Collapse.Item key=\"3\" title=\"Header of Item3\">\n          This is content of item3. This is content of item3. This is content of item3.\n        </Collapse.Item>\n      </Collapse>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| multiple | boolean | false | 是否可以同时展开多项 |\n| animated | boolean | false | 是否添加展开动画 |\n| activeKey | string | number | string[] | number[] | [] | 动态更新展开项的索引数组或字符串或数字 |\n| defaultActiveKey | string | number | string[] | number[] | [] | 初始化默认展开项的索引数组或字符串或数字 |\n| onChange | (activeKey?: string | number | string[] | number[]) => void | - | 点击某一项的回调函数，返回选中的项 |\n\n",
  "Collapse.Item": "### Collapse.Item\n\n\n\ndemo:\n\n        <Collapse.Item key=\"1\" title=\"Header of Item1\">\n          This is content of item1. This is content of item1. This is content of item1.\n        </Collapse.Item>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| title | ReactNode | - | 每一项的名称 |\n| key | string | number | - | 对应 activeKey |\n| disabled | boolean | false | 是否禁用 |\n| onChange | (active?: boolean) => void | - | 点击某一项的回调函数 |\n\n",
  "ConfigProvider": "### ConfigProvider 全局配置\n\n[文档](https://zarm.design/#/components/config-provider)\n      \n\ndemo:\n\n      <ConfigProvider\n        locale={locale === 'enUS' ? enUS : zhCN}\n        primaryColor={primaryColor}\n        theme={theme}\n      >\n        <>\n          <SearchBar />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| locale | Object | - | 语言包配置，默认为中文，语言包可到 zarm/lib/config-provider/locale 目录下寻找 |\n| theme | 'light' | 'dark' | 'light' | 主题模式，光亮主题 和 暗黑主题的切换 |\n| primaryColor | string | '#00bc70' | 品牌标准色 |\n\n",
  "DatePicker": "### DatePicker 日期选择器\n\n[文档](https://zarm.design/#/components/date-picker)\n      \n\ndemo:\n\n      <DatePicker\n        visible={state.date.visible}\n        mode=\"date\"\n        value={state.date.value}\n        wheelDefaultValue={state.date.wheelDefaultValue}\n        onOk={(value) => {\n          setValue('date', value);\n          toggle('date');\n          Toast.show(JSON.stringify(value));\n        }}\n        onCancel={() => toggle('date')}\n      />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| value | string | Date | - | 值 |\n| defaultValue | string | Date | - | 初始值 |\n| mode | string | 'date' | 指定日期选择模式，可选项 year, month, date, time, datetime |\n| min | string | Date | - | 相应 mode 的最小时间 |\n| max | string | Date | - | 相应 mode 的最大时间 |\n| minuteStep | number | 1 | 分钟间隔 |\n| disabled | boolean | false | 是否禁用 |\n| onChange | (value?: Date) => void | - | 值变化时触发的回调函数 |\n\n",
  "DatePicker&DateSelect": "### DatePicker&DateSelect\n\n\n\ndemo:\n\nundefined\n\n",
  "DateSelect": "### DateSelect\n\n\n\ndemo:\n\nundefined\n\n",
  "Drag": "### Drag 拖拽\n\n[文档](https://zarm.design/#/components/drag)\n      \n\ndemo:\n\n      <Drag onDragStart={onDragStart} onDragMove={onDragMove} onDragEnd={onDragEnd}>\n        <div\n          ref={boxRef}\n          style={{\n            display: 'inline-block',\n            transform: `translate3d(${point[0]}px, ${point[1]}px, 0)`,\n          }}\n        >\n          {drag ? (\n            <Button theme=\"danger\">Let me go!</Button>\n          ) : (\n            <Button theme=\"primary\">Catch me~</Button>\n          )}\n        </div>\n      </Drag>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| onDragStart | (event?: MouseEvent | TouchEvent, dragState?: DragState) => void | - | 触摸/点击 起始时触发的事件 |\n| onDragMove | (event?: MouseEvent | TouchEvent, dragState?: DragState) => boolean | - | 拖拽移动时触发的事件 |\n| onDragEnd | (event?: MouseEvent | TouchEvent, dragState?: DragState) => void | - | 触摸/点击 结束时触发的事件 |\n\n",
  "DragState": "### DragState\n\n\n\ndemo:\n\nundefined\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| startTime | Date | new Date() | 起始时间 |\n| startX | number | - | 起始点 x 坐标 |\n| startY | number | - | 起始点 y 坐标 |\n| offsetX | number | - | 横向偏移量 |\n| offsetY | number | - | 纵向偏移量 |\n\n",
  "FilePicker": "### FilePicker 文件选择器\n\n[文档](https://zarm.design/#/components/file-picker)\n      \n\ndemo:\n\n        <FilePicker className=\"file-picker-btn\" onChange={onSelect}>\n          <Icon type=\"add\" size=\"lg\" />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| accept | string | - | 允许上传的附件格式 |\n| capture | string | - | 唤起的原生应用，可选值：照相机camera, 摄像机camcorder, 录音microphone |\n| multiple | boolean | false | 是否多选 |\n| disabled | boolean | false | 是否禁用 |\n| onBeforeSelect | () => boolean | () => true | 选择前触发的事件 |\n| onChange | (file?: object | object[]) => void | - | 值变化时触发的回调函数 |\n\n",
  "Icon": "### Icon 图标\n\n[文档](https://zarm.design/#/components/icon)\n      \n\ndemo:\n\n<Icon component={YourSvg} />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| theme | string | 'default' | 主题，可选值 default、primary、success、warning、danger |\n| size | string | 'md' | 大小，可选值 sm、md、lg |\n| type | string | - | 图标类型，可选值详见 demo 的基本用法 |\n| component | React.ComponentType<React.SVGProps<SVGSVGElement>> | - | 本地 svg 文件，需配合 viewBox 使用 |\n| viewBox | string | '0 0 32 32' | 自定义 SVG 图标时，用来设置画布的起始坐标及大小 |\n\n",
  "ImagePreview": "### ImagePreview 图片预览\n\n[文档](https://zarm.design/#/components/image-preview)\n      \n\ndemo:\n\n      <ImagePreview\n        visible={visibleState.common}\n        images={commonImages}\n        onClose={() => hide('common')}\n        maxScale={10}\n      />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | false | 是否显示 |\n| minScale | number | 1 | 图片最小缩放比例，1 为最小值 |\n| maxScale | number | 3 | 图片最大缩放比例 |\n| images | Array<string | {url: string; originUrl: string;}> | - | 图片地址 |\n| activeIndex | number | 0 | 当前展示的图片是第几张，从 0 开始 |\n| showPagination | boolean | true | 是否显示分页器 |\n| onChange | (activeIndex?: number) => void | - | 图片切换时候回调 |\n| onClose | () => void | - | 关闭时候回调 |\n\n",
  "Input": "### Input 文本框\n\n[文档](https://zarm.design/#/components/input)\n      \n\ndemo:\n\n        <Input\n          clearable\n          type=\"text\"\n          placeholder=\"请输入\"\n          value={title}\n          onChange={(value) => {\n            setTitle(value);\n            console.log(`onChange: ${value}`);\n          }}\n          onBlur={(value) => console.log(`onBlur: ${value}`)}\n        />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| type | string | 'text' | 类型，可选值 text、number、idcard、price、password、search |\n| value | number | string | - | 值 |\n| defaultValue | number | string | - | 初始值 |\n| disabled | boolean | false | 是否禁用 |\n| readOnly | boolean | false | 是否只读 |\n| rows | number | - | 多行文本时的显示行数。type 为 text 类型时有效。 |\n| autoHeight | boolean | false | 是否高度自适应 |\n| maxLength | number | - | 输入字数上限 |\n| showLength | boolean | false | 是否显示输入字数。多行文本（type=\"text\"且包含 rows 属性）时有效。 |\n| clearable | boolean | true | 是否显示清除按钮。多行文本（type=\"text\"且包含 rows 属性）时无效。必须为受控组件（属性包含 value、onChange）时方可生效。 |\n| onChange | (value?: number | string) => void | - | 值变化时触发的回调函数 |\n\n",
  "Keyboard": "### Keyboard 虚拟键盘\n\n[文档](https://zarm.design/#/components/keyboard)\n      \n\ndemo:\n\n      <Keyboard type={type} onKeyClick={(key) => console.log(key)} />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| type | string | 'number' | 键盘类型，可选值 number、price、idcard |\n| onKeyClick | (key?: string) => void | - | 点击按键时触发的回调函数 |\n\n",
  "KeyboardPicker": "### KeyboardPicker\n\n\n\ndemo:\n\nundefined\n\n",
  "Loading": "### Loading 加载\n\n[文档](https://zarm.design/#/components/loading)\n      \n\ndemo:\n\nundefined\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | false | 是否展示 |\n| content | ReactNode | - | 显示的内容 |\n| stayTime | number | 3000 | 自动关闭前停留的时间（单位：毫秒） |\n| mask | boolean | true | 是否展示遮罩层 |\n| onMaskClick | () => void | - | 点击遮罩层时触发的回调函数 |\n| afterClose | () => void | - | Loading 隐藏后的回调函数 |\n| mountContainer | HTMLElement | () => HTMLElement | document.body | 指定 Loading 挂载的 HTML 节点 |\n\n",
  "LocaleProvider": "### LocaleProvider 国际化<br />（即将废弃）\n\n[文档](https://zarm.design/#/components/locale-provider)\n      \n\ndemo:\n\n    <LocaleProvider locale={locales[lang]}>\n      <>\n        <Cell\n          title=\"切换语言包\"\n          description={\n            <Radio.Group compact type=\"button\" value={lang} onChange={setLang}>\n              <Radio value=\"zh_CN\">中文</Radio>\n              <Radio value=\"en_US\">EN</Radio>\n            </Radio.Group>\n          }\n        />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| locale | Object | - | 语言包配置，默认为中文，语言包可到 zarm/lib/locale-provider/locale 目录下寻找 |\n\n",
  "Marquee": "### Marquee 滚动\n\n[文档](https://zarm.design/#/components/marquee)\n      \n\ndemo:\n\n      <Marquee animationDelay={2000} animationDuration={30000}>\n        <div>我延迟执行2秒，从右向左滚动，字有点多，我走慢点</div>\n      </Marquee>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| direction | string | 'left' | 滚动方向，可选值为left、right、up、down |\n| width | number | string | - | 容器宽度 |\n| height | number | string | - | 容器高度 |\n| loop | boolean | true | 是否循环 |\n| animationDuration | number | 6000 | 动画执行时间（单位：毫秒） |\n| animationDelay | number | 0 | 动画延迟执行时间（单位：毫秒） |\n\n",
  "Mask": "### Mask 遮罩\n\n[文档](https://zarm.design/#/components/mask)\n      \n\ndemo:\n\n      <Mask visible={visible} onClick={toggle} />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | 否 | false |\n| type | 'normal' | 'transparent' | 否 | 'normal' |\n| onClick | MouseEventHandler<HTMLDivElement> | 否 | &nbsp; |\n\n",
  "Message": "### Message 消息\n\n[文档](https://zarm.design/#/components/message)\n      \n\ndemo:\n\n    <Message>普通</Message>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| theme | string | 'primary' | 主题，可选值 default、primary、success、warning、danger |\n| size | string | 'md' | 设置大小，可选值为 md、lg |\n| icon | ReactNode | - | 设置图标 |\n| closable | boolean | false | 是否显示关闭按钮 |\n| hasArrow | boolean | false | 是否显示箭头 |\n| onClick | () => void | - | 点击后触发的回调函数 |\n\n",
  "Modal": "### Modal 模态框\n\n[文档](https://zarm.design/#/components/modal)\n      \n\ndemo:\n\n      <Modal visible={state.normal.visible} title=\"标题\" closable onCancel={() => toggle('normal')}>\n        模态框内容\n      </Modal>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| shape | string | 'radius' | 形状，可选值 rect、radius |\n| visible | boolean | false | 是否显示 |\n| animationType | string | 'fade' | 动画效果，可选值 fade, door, flip, rotate, zoom,moveUp, moveDown, moveLeft, moveRight,slideUp, slideDown, slideLeft, slideRight |\n| animationDuration | number | 200 | 动画执行时间（单位：毫秒） |\n| width | string | number | '70%' | 宽度 |\n| mask | boolean | true | 是否展示遮罩层 |\n| maskType | string | 'normal' | 遮罩层的类型，可选值 transparent, normal |\n| maskClosable | boolean | false | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\n| closable | boolean | false | 右上角是否显示关闭按钮，需要和 onCancel 一起使用 |\n| onCancel | () => void | - | 如果 maskClosable 或 closable 为 true，那么点击遮罩或者右上角关闭按钮会调用此函数 |\n| title | ReactNode | - | 标题 |\n| footer | ReactNode | - | 弹窗底部内容 |\n| destroy | boolean | true | 弹层关闭后是否移除节点 |\n| afterOpen | () => void | - | 模态框打开后的回调 |\n| afterClose | () => void | - | 模态框关闭后的回调 |\n| mountContainer | HTMLElement | () => HTMLElement | document.body | 指定 Modal 挂载的 HTML 节点 |\n\n",
  "NavBar": "### NavBar 导航栏\n\n[文档](https://zarm.design/#/components/nav-bar)\n      \n\ndemo:\n\n  <NavBar\n    left={<Icon type=\"arrow-left\" theme=\"primary\" onClick={() => window.history.back()} />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| title | ReactNode | - | 标题渲染 |\n| left | ReactNode | - | 导航栏左侧渲染 |\n| right | ReactNode | - | 导航栏右侧渲染 |\n\n",
  "NoticeBar": "### NoticeBar 通告栏\n\n[文档](https://zarm.design/#/components/notice-bar)\n      \n\ndemo:\n\n    <NoticeBar>普通</NoticeBar>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| theme | string | 'warning' | 主题，可选值 default、primary、success、warning、danger |\n| icon | ReactNode | - | 设置图标 |\n| closable | boolean | false | 是否显示关闭按钮 |\n| hasArrow | boolean | false | 是否显示箭头 |\n| speed | number | 50 | 滚动时的速度（单位：px/s） |\n| delay | number | 2000 | 开启滚动功能时前后停留的时间（单位：ms） |\n| onClick | () => void | - | 点击后触发的回调函数 |\n\n",
  "Panel": "### Panel\n\n\n\ndemo:\n\nundefined\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| title | ReactNode | - | 标题 |\n| children | ReactNode | - | 内容 |\n| disabled | boolean | false | 是否禁用 |\n\n",
  "Picker": "### Picker\n\n\n\ndemo:\n\n      <Picker\n        visible={state.single.visible}\n        value={state.single.value}\n        dataSource={state.single.dataSource}\n        onOk={(selected) => {\n          console.log('Single Picker onOk: ', selected);\n          Toast.show(JSON.stringify(selected));\n          setValue(\n            'single',\n            selected.map((item) => item.value),\n          );\n          setVisible('single');\n        }}\n        onCancel={() => setVisible('single')}\n      />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| dataSource | DataSource<T = { label: string; value: string | number | boolean }> = Array<T & { children?: DataSource<T> }> | [] | 数据源 |\n| value | string | number | boolean | Array<string | number | boolean> | - | 值 |\n| defaultValue | string | number | boolean | Array<string | number | boolean> | - | 初始值 |\n| wheelDefaultValue | string | number | boolean | Array<string | number | boolean> | - | 滚轮初始停留的位置 |\n| valueMember | string | 'value' | 值字段对应的 key |\n| itemRender | (data?: { [key: string]: string | number | boolean }) => ReactNode | (data) => data.label | 单个选项的展示 |\n| disabled | boolean | false | 是否禁用 |\n| cols | number | Infinity | 级联选择器的级数 |\n| onChange | (selected?: Array<{ [key: string]: string | number | boolean }>) => void | - | 值变化时触发的回调函数 |\n\n",
  "Picker&Select": "### Picker&Select\n\n\n\ndemo:\n\nundefined\n\n",
  "Select": "### Select\n\n\n\ndemo:\n\nundefined\n\n",
  "Popper": "### Popper 气泡层\n\n[文档](https://zarm.design/#/components/popper)\n      \n\ndemo:\n\n        <Popper\n          content=\"我是气泡层的内容\"\n          destroy={false}\n          visible={visible}\n          trigger={trigger}\n          direction={direction}\n          animationType={animationType}\n          className=\"custom-content\"\n        >\n          <Button\n            theme=\"primary\"\n            size=\"xs\"\n            onClick={() => trigger === 'manual' && setVisible(!visible)}\n          >\n            点击{visible ? '隐藏' : '显示'}\n          </Button>\n        </Popper>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| className | string | - | 气泡层类名追加 |\n| content | ReactNode | - | 显示内容 |\n| hasArrow | boolean | false | 是否显示箭头节点<font color=\"red\">（注：需要自行定义箭头样式）</font> |\n| destroy | boolean | true | 气泡层关闭后是否移除节点 |\n| mountContainer | HTMLElement | () => HTMLElement | document.body | 指定 Popper 挂载的 HTML 节点 |\n| animationType | string | 'zoomFade' | 可选值 zoomFade, menuSlide, fade, door, flip, rotate, zoom,moveUp, moveDown, moveLeft, moveRight,slideUp, slideDown, slideLeft, slideRight |\n| animationDuration | number | 200 | 动画执行时间（单位：毫秒） |\n| arrowPointAtCenter | boolean | false | 箭头是否指向目标元素中心 |\n| mouseEnterDelay | number | 100 | 鼠标移入显示气泡层的延时时间（单位：毫秒） |\n| mouseLeaveDelay | number | 100 | 鼠标移出隐藏气泡层的延时时间（单位：毫秒） |\n| direction | string | 'top' | 显示方向，可选值 topLeft、top、topRight、rightTop、right、rightBottom、bottomLeft、bottom、bottomRight、leftTop、left、leftBottom |\n| trigger | string | 移动端为'click' <br /> 桌面端为'hover' | 触发方式，可选值为：click 点击触发状态、hover 鼠标经过触发、focus 聚焦状态触发、manual 受控触发、contextMenu 右键触发 |\n| visible | boolean | false | 是否显示，trigger='manual' 时有效 |\n| onVisibleChange | (visible?: boolean) => void | () => {} | 显示/隐藏 气泡层触发的事件 |\n\n",
  "Popup": "### Popup 弹出框\n\n[文档](https://zarm.design/#/components/popup)\n      \n\ndemo:\n\n      <Popup\n        visible={visible.popTop}\n        direction=\"top\"\n        mask={false}\n        afterClose={() => console.log('关闭')}\n      >\n        <div className=\"popup-box-top\">更新成功</div>\n      </Popup>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | false | 是否显示 |\n| direction | string | 'bottom' | 弹出方向，可选值 top, bottom, left, right, center |\n| animationType | string | 'fade' | 当弹出方向为中间位置（direction=\"center\"）时的动画效果，可选值 fade, door, flip, rotate, zoom,moveUp, moveDown, moveLeft, moveRight,slideUp, slideDown, slideLeft, slideRight |\n| animationDuration | number | 200 | 动画执行时间（单位：毫秒） |\n| width | string | number | - | 弹层宽度 |\n| mask | boolean | true | 是否展示遮罩层 |\n| maskType | string | 'normal' | 遮罩层的类型，可选值 transparent, normal |\n| destroy | boolean | true | 弹层关闭后是否移除节点 |\n| afterOpen | () => void | - | 弹层展示后的回调 |\n| afterClose | () => void | - | 弹层关闭后的回调 |\n| onMaskClick | () => void | - | 点击遮罩层时触发的回调函数 |\n| onEsc | () => void | - | 点击 Esc 键时触发的回调函数 |\n| mountContainer | HTMLElement | () => HTMLElement | document.body | 指定 Popup 挂载的 HTML 节点 |\n\n",
  "Progress": "### Progress 进度条\n\n[文档](https://zarm.design/#/components/progress)\n      \n\ndemo:\n\n        <Progress\n          shape=\"line\"\n          percent={percent}\n          theme={theme}\n          strokeShape={strokeShape}\n          strokeWidth={strokeWidth}\n        />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| theme | string | 'primary' | 主题，可选值 primary, success, warning, danger |\n| size | string | 'md' | 大小，可选值 lg, md, sm，number 类型的值，或者任何合法的 css 宽度值 |\n| shape | string | 'line' | 形状，可选值 line, circle, semi-circle |\n| percent | number | 0 | 进度百分比（范围：0 ～ 100） |\n| text | (percent?: number) => ReactNode | (percent) => `${percent}%` | 进度文本显示 |\n| strokeShape | string | 'round' | 线条形状，可选值 round, rect |\n| strokeWidth | number | - | 线条粗细，单位: px，不设置则根据大小自动调整 |\n\n",
  "Pull": "### Pull 上拉加载下拉刷新\n\n[文档](https://zarm.design/#/components/pull)\n      \n\ndemo:\n\n      <Pull\n        ref={pullRef}\n        style={style}\n        refresh={{\n          state: refreshing,\n          handler: refreshData,\n          // render: (refreshState, percent) => {\n          //   const cls = 'custom-control';\n          //   switch (refreshState) {\n          //     case REFRESH_STATE.pull:\n          //       return (\n          //         <div className={cls}>\n          //           <ActivityIndicator loading={false} percent={percent} />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| refresh | Action | - | 下拉刷新的参数配置 |\n| load | Action | - | 上拉加载的参数配置 |\n| animationDuration | number | 400 | 动画执行时间，单位：毫秒 |\n| stayTime | number | 1000 | 加载成功停留时间 |\n\n",
  "REFRESH_STATE": "### REFRESH_STATE\n\n\n\ndemo:\n\nundefined\n\n",
  "LOAD_STATE": "### LOAD_STATE\n\n\n\ndemo:\n\nundefined\n\n",
  "Radio": "### Radio 单选框\n\n[文档](https://zarm.design/#/components/radio)\n      \n\ndemo:\n\n      <Radio>普通</Radio>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| value | string | number | - | 值 |\n| checked | boolean | - | 当前是否选中 |\n| defaultChecked | boolean | - | 初始是否选中 |\n| disabled | boolean | false | 是否禁用 |\n| onChange | (e: ChangeEvent<HTMLInputElement>) => void | - | 值变化时触发的回调函数 |\n\n",
  "Radio.Group": "### Radio.Group\n\n\n\ndemo:\n\n    <Radio.Group>\n      <Radio value=\"0\">选项一</Radio>\n      <Radio value=\"1\">选项二</Radio>\n      <Radio value=\"2\">选项三</Radio>\n    </Radio.Group>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| type | string | - | 显示类型，可选值 button, cell |\n| value | string | number | - | 选中值 |\n| defaultValue | string | number | - | 初始选中值 |\n| disabled | boolean | false | 是否禁用 |\n| block | boolean | false | 子项是否为块级元素 |\n| onChange | (value?: string | number) => void | - | 值变化时触发的回调函数 |\n| size | string | 'xs' | 按钮类型时的大小，可选值为 lg、md、sm、xs |\n| shape | string | 'radius' | 按钮类型时的形状，可选值 rect, radius, round |\n| ghost | boolean | false | 按钮类型时，选中项样式是否为幽灵按钮 |\n| compact | boolean | false | 按钮类型时，是否为紧凑模式 |\n\n",
  "Scroller": "### Scroller 滚动\n\n[文档](https://zarm.design/#/components/scroller)\n      \n\ndemo:\n\n      <Scroller container={() => containerRef.current} onScroll={setScrollTop}>\n        <div\n          ref={containerRef}\n          style={{\n            overflowY: 'auto',\n            maxHeight: 400,\n          }}\n        >\n          {list}\n        </div>\n      </Scroller>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| container | HTMLElement | (() => HTMLElement) | window | 设置滚动容器 |\n| onScroll | (scrollTop?: number) => void | - | 滚动时触发的回调函数 |\n\n",
  "SearchBar": "### SearchBar 搜索框\n\n[文档](https://zarm.design/#/components/search-bar)\n      \n\ndemo:\n\n  <SearchBar\n    onSubmit={(value) => {\n      console.log(`搜索内容为${value}`);\n    }}\n    onFocus={() => {\n      console.log('获取焦点');\n    }}\n    onChange={(value) => {\n      console.log(value);\n    }}\n    onBlur={() => {\n      console.log('失去焦点');\n    }}\n    onClear={() => {\n      console.log('点击了清除');\n    }}\n    onCancel={() => {\n      console.log('点击了取消');\n    }}\n  />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| placeholder | string | '搜索' | 占位符 |\n| value | string | - | 值 |\n| defaultValue | string | - | 初始值 |\n| shape | string | 'radius' | 形状，可选值 rect, radius, round |\n| disabled | boolean | false | 是否禁用 |\n| showCancel | boolean | false | 是否一直展示取消按钮 |\n| cancelText | string | '取消' | 取消按钮显示的内容 |\n| maxLength | number | - | 输入字数上限 |\n| clearable | boolean | true | 是否提供清空输入框功能 |\n| onChange | (value?: string) => void | - | 值变化时触发的回调函数 |\n| onSubmit | (value?: string) => void | - | 提交时触发的回调函数 |\n| onFocus | () => void | - | 获取焦点时触发的回调函数 |\n| onBlur | () => void | - | 失去焦点时触发的回调函数 |\n| onClear | () => void | - | 点击清除按钮时触发的回调函数 |\n| onCancel | () => void | - | 点击取消时触发的回调函数 |\n\n",
  "Slider": "### Slider 滑动输入条\n\n[文档](https://zarm.design/#/components/slider)\n      \n\ndemo:\n\n        <Slider value={value} onChange={setValue} />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| value | number | - | 值 |\n| defaultValue | number | - | 初始值 |\n| min | number | 0 | 最小值 |\n| max | number | 100 | 最大值 |\n| disabled | boolean | false | 是否禁用 |\n| step | number | 1 | 步长 |\n| vertical | boolean | false | 是否为纵向 |\n| showMark | boolean | false | 是否显示标记刻度 |\n| marks | { [key: number]: React.ReactNode } | {} | 自定义标记刻度的渲染展示 |\n| onChange | (value?: number) => void | - | 值变化时触发的回调函数 |\n\n",
  "StackPicker": "### StackPicker 层叠选择器\n\n[文档](https://zarm.design/#/components/stack-picker)\n      \n\ndemo:\n\n      <StackPicker\n        maskClosable\n        visible={visible}\n        value={value}\n        title=\"层叠选择器\"\n        dataSource={District}\n        onChange={(value) => {\n          console.log('onChange', value);\n        }}\n        onOk={(value) => {\n          console.log('onOk', value);\n          setValue(value);\n          setVisible(false);\n        }}\n        onCancel={() => {\n          console.log('onCancel');\n          setVisible(false);\n        }}\n      />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | false | 是否展示 |\n| dataSource | object[] | [] | 数据源 |\n| defaultValue | string | number | boolean | Array<string | number | boolean> | - | 初始值 |\n| value | string | number | boolean | Array<string | number | boolean> | - | 值 |\n| displayMember | string | 'label' | 键字段对应的 key |\n| valueMember | string | 'value' | 值字段对应的 key |\n| displayRender | (selected?: object) => string | selected => selected.map(item => item.label) | 所选值的展示 |\n| itemRender | (data?: object) => data.label | (data?: object) => data.label | 单个选项的展示 |\n| title | string | '请选择' | 选择器标题 |\n| okText | string | '确定' | 确定栏文字 |\n| cancelText | string | '取消' | 取消栏文字 |\n| maskClosable | boolean | true | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\n| onChange | (value: string[]) => void | - | 值变化时触发的回调函数 |\n| onOk | (value: string[]) => void | - | 点击确定时触发的回调函数 |\n| onCancel | () => void | - | 点击取消时触发的回调函数 |\n\n",
  "Stepper": "### Stepper 步进器\n\n[文档](https://zarm.design/#/components/stepper)\n      \n\ndemo:\n\n          <Stepper\n            value={value}\n            onChange={setValue}\n            onInputChange={(value) => {\n              console.log('onInputChange:', value);\n            }}\n          />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| shape | string | 'radius' | 形状，可选值 rect, radius, circle |\n| size | string | 'md' | 大小，可选值 md、lg |\n| type | string | 'text' | 输入类型，可选值 text、number、price、tel |\n| value | number | string | - | 值 |\n| defaultValue | number | - | 初始值 |\n| min | number | - | 最小值 |\n| max | number | - | 最大值 |\n| step | number | 1 | 步长 |\n| disabled | boolean | false | 是否禁用 |\n| disableInput | boolean | false | 是否禁用输入框 |\n| onInputChange | (value?: number ｜ string) => void | - | 输入值变化时触发的回调函数 |\n| onChange | (value?: number ｜ string) => void | - | 值变化时触发的回调函数 |\n\n",
  "SwipeAction": "### SwipeAction 滑动操作\n\n[文档](https://zarm.design/#/components/swipe-action)\n      \n\ndemo:\n\n    <SwipeAction\n      right={[\n        <Button size=\"lg\" shape=\"rect\" theme=\"primary\" onClick={() => console.log('右按钮1')}>\n          右按钮1\n        </Button>,\n        <Button size=\"lg\" shape=\"rect\" theme=\"danger\" onClick={() => console.log('右按钮2')}>\n          右按钮2\n        </Button>,\n      ]}\n    >\n      <Cell>左滑看看</Cell>\n    </SwipeAction>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| left | object[] | [] | 左侧按钮组 |\n| right | object[] | [] | 右侧按钮组 |\n| moveDistanceRatio | number | 0.5 | 移动距离比例临界点 |\n| moveTimeSpan | number | 300 | 移动时间跨度临界点 |\n| animationDuration | number | 300 | 动画执行时间，单位：毫秒 |\n| offset | number | 10 | 回弹偏移的距离 |\n| autoClose | boolean | true | 点击按钮后是否自动关闭 |\n| disabled | boolean | false | 是否允许滑动 |\n| onOpen | () => void | - | 滑开时触发的回调函数 |\n| onClose | () => void | - | 关闭时触发的回调函数 |\n\n",
  "Switch": "### Switch 开关\n\n[文档](https://zarm.design/#/components/switch)\n      \n\ndemo:\n\n<Switch checked={checked} onChange={setChecked} />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| checked | boolean | - | 值 |\n| defaultChecked | boolean | - | 初始值 |\n| disabled | boolean | false | 是否禁用 |\n| onChange | (value?: boolean) => void | - | 值变化时触发的回调函数 |\n\n",
  "TabBar": "### TabBar 标签栏\n\n[文档](https://zarm.design/#/components/tab-bar)\n      \n\ndemo:\n\n      <TabBar visible={visible} activeKey={activeKey} onChange={setActiveKey}>\n        <TabBar.Item itemKey=\"home\" title=\"主页\" icon={<TabIcon type=\"home\" />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| activeKey | number | string | - | 当前选中项 |\n| defaultActiveKey | number | string | - | 初始选中项, 默认第一个选中 |\n| onChange | (value?: number | string) => void | - | 值变化时触发的回调函数 |\n| visible | boolean | true | 是否显示 |\n\n",
  "TabBar.Item": "### TabBar.Item\n\n\n\ndemo:\n\n        <TabBar.Item itemKey=\"home\" title=\"主页\" icon={<TabIcon type=\"home\" />\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| itemKey | number | string | - | 唯一标识，对应activeKey，不设置则默认取 index 索引 |\n| title | ReactNode | - | 标题文字 |\n| icon | ReactNode | - | 图标 |\n| activeIcon | ReactNode | - | 选中时图标，不设置等同 icon 属性的值 |\n| badge | Object | - | 参考Badge组件 |\n\n",
  "Tabs": "### Tabs 标签页\n\n[文档](https://zarm.design/#/components/tabs)\n      \n\ndemo:\n\n    <Tabs value={value} onChange={setValue}>\n      <Panel title=\"选项卡1\">\n        <div className=\"content\">选项卡1内容</div>\n      </Panel>\n      <Panel title=\"选项卡2\">\n        <div className=\"content\">选项卡2内容</div>\n      </Panel>\n    </Tabs>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| value | number | - | 值 |\n| defaultValue | number | - | 初始值 |\n| disabled | boolean | false | 是否禁用 |\n| direction | horizontal | vertical | 'horizontal' | 方向 |\n| swipeable | boolean | false | 是否支持滑动切换 |\n| scrollable | boolean | false | 是否支持滚动 |\n| lineWidth | number | string | - | 线条宽度 |\n| onChange | (index?: number) => void | - | 值变化时触发的回调函数 |\n\n",
  "Toast": "### Toast 轻提示\n\n[文档](https://zarm.design/#/components/toast)\n      \n\ndemo:\n\nundefined\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | false | 是否展示 |\n| content | ReactNode | - | 显示的内容 |\n| stayTime | number | 3000 | 自动关闭前停留的时间（单位：毫秒） |\n| mask | boolean | false | 是否展示遮罩层 |\n| onMaskClick | () => void | - | 点击遮罩层时触发的回调函数 |\n| afterClose | () => void | - | Toast 隐藏后的回调函数 |\n| mountContainer | HTMLElement | () => HTMLElement | document.body | 指定 Toast 挂载的 HTML 节点 |\n\n",
  "Tooltip": "### Tooltip 工具提示\n\n[文档](https://zarm.design/#/components/tooltip)\n      \n\ndemo:\n\n        <Tooltip direction=\"topLeft\" content=\"topLeft text\">\n          <Button size=\"xs\">TL</Button>\n        </Tooltip>\n\n| props | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :------: |\n| visible | boolean | false | 是否显示 |\n| content | ReactNode | - | 显示内容 |\n| hasArrow | boolean | false | 是否带有箭头 |\n| arrowPointAtCenter | boolean | false | 箭头是否指向目标元素中心 |\n| className | string | - | 气泡层类名追加 |\n| mouseEnterDelay | number | 100 | 鼠标移入后延时多少才显示气泡层，单位：毫秒 |\n| mouseLeaveDelay | number | 100 | 鼠标移出后延时多少才隐藏气泡层，单位：毫秒 |\n| direction | string | 'top' | 显示方向，可选值 topLeft、top、topRight、rightTop、right、rightBottom、bottomLeft、bottom、bottomRight、leftTop、left、leftBottom |\n| trigger | string | 'click' | 触发方式，PC 端默认值为 'hover', 可选值为：点击触发click、鼠标经过触发hover、聚焦状态触发focus、受控触发manual、右键触发contextMenu |\n| onVisibleChange | (visible?: boolean) => void | noop | 显示/隐藏触发的事件 |\n\n"
}
